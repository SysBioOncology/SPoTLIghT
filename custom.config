params {
    config_profile_description = 'GaitiLab cluster profile'

    max_cpus    = 24
    max_memory  = 184.GB
    // 7.d for himem, but not sure yet how to handle htis
    max_time    = 5.d
    maxRetries  = 10

    clinical_files_input = "${projectDir}/assets/codebook.txt"
    path_codebook= 'assets/NO_FILE'
    class_name='SKCM'
    clinical_file_out_file = 'generated_clinical_file'
    tumor_purity_threshold=80
    is_tcga = false
    image_dir = "${projectDir}/data_example/tiny_xenium_set"
    gradient_mag_filter=10
    n_shards=320
    bot_out = 'bot_train'
    pred_out = 'pred_train'
    model_name='inception_v4'


    checkpoint_path = "${projectDir}/assets/checkpoint/Retrained_Inception_v4/model.ckpt-100000"
    slide_type = 'FFPE'
    path_tissue_classes= "${projectDir}/assets/tissue_classes.csv"

    celltype_models = "${projectDir}/assets/TF_models/SKCM_FF"
    var_names_path = "${projectDir}/assets/task_selection_names.pkl"
    prediction_mode='test'

    cell_types_path = 'assets/NO_FILE'
    n_outerfolds = 5

    // Prefix for spatial features output filenames, else 'slide_type' is used
    out_prefix = 'dummy'


    // Spatial features parameters
    graphs_path = 'assets/NO_FILE'
    n_outerfolds = 5
    abundance_threshold = 0.5
    shapiro_alpha = 0.05
    cutoff_path_length = 2

    n_clusters = 8
    max_dist = 'dummy'
    max_n_tiles_threshold = 2
    tile_size = 512
    overlap = 50

    metadata_path = 'assets/NO_FILE'
    merge_var = "slide_submitter_id"
    sheet_name = 'dummy'

    outdir = "output"


}
nextflow.enable.moduleBinaries = true

process {
    executor = "local"
}

// Preform work directory cleanup after a successful run
cleanup = true
// env.PYTHONPATH = "${projectDir}/lib:${projectDir}/lib/myslim"

// Profile to deactivate automatic cleanup of work directory after a successful run. Overwrites cleanup option.
profiles {
    debug {
        cleanup = false
    }
    slurm {
        process {
            executor = "slurm"
            jobName = { "$task.hash" }
            // Select right queue
            queue = { assign_queue( task.memory * task.attempt ) }
        }
    }
    h4h {
        // When on cluster ensure apptainer and java/18 are loaded
        process {
            beforeScript = """module load apptainer""".stripIndent()
        }
    }
    apptainer {
        process.container = "${projectDir}/spotlight.sif"

    }
}


def assign_queue (mem){
    def queue = ""
    switch ( mem  ) {
            case { it > 185.GB }:
                queue = 'superhimem'
                break
            case { it > 61.4.GB }:
                queue = 'veryhimem'
                break
            case { it > 30.72.GB }:
                queue = 'himem'
                break
            default:
                queue = 'all'
                break
        }
    return queue
}

