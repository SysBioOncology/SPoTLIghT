/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    SysBioOncology/spotlight_docker Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    spotlight_modules= "extracthistopatho,predicttiles,computespatial"
    clinical_files_input= "assets/NO_FILE"
    cancer_type= "SKCM"
    slide_type= "FFPE"
    is_tcga= false
    is_tumor = true

    //// -----------------------------------------------------------------------------
    ////    Extracting histopathological features
    //// -----------------------------------------------------------------------------

    // Files and directories
    path_codebook= "assets/codebook.txt"
    clinical_file_out_file= "generated_clinical_file"
    image_dir= "data_example/xenium_images"
    checkpoint_path= "assets/checkpoint/Retrained_Inception_v4/model.ckpt-100000"
    path_tissue_classes= "assets/tissue_classes.csv"

    // Parameters
    tumor_purity_threshold= 80
    gradient_mag_filter= 10
    n_shards= 320
    bot_out_filename= "bot_train"
    pred_out_filename= "pred_train"
    model_name= "inception_v4"

    //// -----------------------------------------------------------------------------
    ////    Immune deconv bulkRNAseq
    //// -----------------------------------------------------------------------------

    gene_exp_path= "data_example/TCGA_SKCM_expression/SKCM.rnaseqv2__illuminahiseq_rnaseqv2__unc_edu__Level_3__RSEM_genes__data.data.txt"
    is_tpm= false
    deconv_tools = "quantiseq,epic,mcp_counter,xcell"
    quantiseq_path = 'assets/NO_FILE'
    epic_path = 'assets/NO_FILE'
    mcp_counter_path = 'assets/NO_FILE'
    xcell_path = 'assets/NO_FILE'

    mcp_probesets =  "assets/mcp_counter/probesets.txt"
    mcp_genes=  "assets/mcp_counter/genes.txt"

    //// -----------------------------------------------------------------------------
    ////    Building multi-task cell type models
    //// -----------------------------------------------------------------------------

    // Files and directories
    clinical_file_path = "assets/NO_FILE"
    thorsson_scores_path= "assets/local/Thorsson_Scores_160_Signatures.tsv"
    estimate_scores_path= "assets/local/ESTIMATE.xlsx"
    absolute_tumor_purity_path= "assets/local/TCGA_ABSOLUTE.txt"
    gibbons_scores_path= "assets/local/Gibbons.xlsx"
    mfp_gene_signatures_path= "assets/gene_signatures.gmt"

    bottleneck_features_path= "assets/NO_FILE"
    var_names_path= "assets/task_selection_names.pkl"
    target_features_path= "assets/NO_FILE"
    model_cell_types = "CAFs,endothelial_cells,T_cells,tumor_purity"

    // Parameters
    alpha_min= -4
    alpha_max= -1
    n_steps= 40
    n_outerfolds= 5
    n_innerfolds= 10
    n_tiles= 50
    split_level= "sample_submitter_id"

    //// -----------------------------------------------------------------------------
    ////    Predict tile-level cell type abundance
    //// -----------------------------------------------------------------------------
    celltype_models_path= "assets/TF_models/SKCM_FF"
    prediction_mode= "test"
    cell_types_path= "assets/NO_FILE"
    is_model_dir=1

    //// -----------------------------------------------------------------------------
    ////    Computing spatial features
    //// -----------------------------------------------------------------------------

    // Prefix for spatial features output filenames, else 'slide_type' is used
    out_prefix= "dummy"

    tile_level_celltype_predictions = "assets/NO_FILE"

    // Spatial features parameters
    graphs_path= "assets/NO_FILE"
    abundance_threshold= 0.5
    shapiro_alpha= 0.05
    cutoff_path_length= 2

    n_clusters= 8
    max_dist= "dummy"
    max_n_tiles_threshold= 2
    tile_size= 512
    overlap= 50

    metadata_path= "assets/NO_FILE"
    merge_var= "slide_submitter_id"
    sheet_name= "dummy"


    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = 'https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}'
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println('WARNING: Could not load nf-core/config profiles: "${params.custom_config_base}/nfcore_custom.config')
}

// Load SysBioOncology/spotlight_docker custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/spotlight.config"
} catch (Exception e) {
    System.err.println('WARNING: Could not load nf-core/config/spotlight profiles: ${params.custom_config_base}/pipeline/spotlight.config')
}


profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        // docker.runOptions       = '-u $(id -u):$(id -g)'
        process.container       = "joank23/spotlight"
    }
    arm {
        docker.runOptions       = '--platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false

        process {
        container = "${projectDir}/spotlight.sif"
        runOptions = "--pwd \$PWD --no-home --cleanenv -c --bind ${projectDir}:/mnt"
        }

    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'docker.io'
docker.registry      = 'docker.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
    id 'nf-schema@2.1.1'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = '/.Rprofile'
    R_ENVIRON_USER   = '/.Renviron'
    RSCRIPT_PATH  = '/opt/conda/bin/Rscript'
    JULIA_DEPOT_PATH = '/usr/local/share/julia'
    PYTHONPATH = "${projectDir}/lib:${projectDir}/lib/myslim"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'SysBioOncology/spotlight_docker'
    author          = '''Joan Kant'''
    homePage        = 'https://github.com/SysBioOncology/spotlight_docker'
    description     = '''Computational framework (SPoTLIghT) to derive spatial graph-based interpretable features from H&E (fresh-frozen, FF) tissue slides'''
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
