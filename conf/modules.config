/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    // Setting defaults
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "copy",
        saveAs: { filename -> 
            if (filename.equals('versions.yml') | filename == "ok.txt") { null }
            else { filename }    
        }
    ]

    withLabel: 'extract_histo_patho_features' {
        publishDir = [
        path: { "${params.outdir}/1_extract_histopatho_features" },
        saveAs: { filename -> 
            if (filename.equals('versions.yml') || filename.equals("ok.txt")) { null }
            else if (filename.endsWith(".parquet") && filename.startsWith("features-")) { "features_format_parquet/${filename}" }
            else if (filename.endsWith(".parquet") && filename.startsWith("predictions-")) {"predictions_format_parquet/${filename}"}
            else { filename }}
        ]
    }

    // The three main subworkflows
    withName: 'BOTTLENECK_PREDICT' {
        publishDir = [
        path: { "${params.outdir}/1_extract_histopatho_features" },
        ]
    }
    withLabel: 'tf_learning_celltyp_quant' {
        publishDir = [
        path: { "${params.outdir}/2_tile_level_quantification" },
        ]
    }

    // Type of spatial features
    withLabel: 'spatial_clustering_features' {
        publishDir = [
            path: {"${params.outdir}/3_spatial_features/clustering_features"}, 
        //     saveAs: { filename -> 
        //     if (filename.equals('versions.yml') | filename.equals("ok.txt")) { null }
        //     // else if (filename.endsWith('_graphs.pkl')) { "${params.outdir}/3_spatial_features/*" }
        //     else { filename }    
        // }
        ]
    }

    withLabel: 'spatial_features' {
        publishDir = [
            path: { "${params.outdir}/3_spatial_features" },
        ]

    }

    withLabel: 'spatial_network_features' {
        publishDir = [
            path: {"${params.outdir}/3_spatial_features/network_features" } 
            // saveAs: { filename -> 
            // if (filename.equals('versions.yml') | filename.equals("ok.txt")) { null }
            // // else if (filename.endsWith('_graphs.pkl')) { "${params.outdir}/3_spatial_features/*" }
            // else { filename }
            // }    
        ]

    }

    // Individual modules (processes)
    withName: 'CREATE_CLINICAL_FILE' {
        ext.prefix = {"generated_clinical_file"}
    }

    withName: 'TILING_SINGLE_SLIDE' {
        publishDir = [
        path: { "${params.outdir}/1_extract_histopatho_features/tiles" },
        mode: "symlink",
        ]
    }

    withName: 'PREPROCESSING_SLIDES' {
        publishDir = [
        path: { "${params.outdir}/1_extract_histopatho_features/process_train" },
        mode: "symlink",
        ]
    }

    withLabel: 'compute_spatial_features' {
        cpus = check_max( 16, "cpu")
        time = { check_max ( 8.h * task.attempt, 'time')}
        memory = {check_max ( 32.GB * task.attempt, 'memory')}

    }


    withName: 'CREATE_TPM_MATRIX' {
        // ext.args   = ...
        ext.when   = { !params.is_tpm }
    }


    withName: 'IMMUNEDECONV' {
        // ext.args   = ...
        ext.when   = params.deconv_tools
    }

    withLabel: 'rcontainer' {
        container = "joank23/immunedeconvr"

        // profiles {
        //     docker: 

        // }
        // containerOptions = {
        //     "-w \$PWD --mount type=tmpfs,destination=/tmp"
        // }
    }
}
