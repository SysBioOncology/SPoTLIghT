/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    // Setting defaults
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> 
            if (filename.equals('versions.yml') | it == "ok.txt") { null }
            else { filename }    
        }
    ]

    // The three main subworkflows
    withName: 'BOTTLENECK_PREDICT' {
        publishDir = [
        path: { "${params.outdir}/1_extract_histopatho_features" },
        // mode: params.publish_dir_mode,
        // saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withLabel: 'tf_learning_celltyp_quant' {
        publishDir = [
        path: { "${params.outdir}/2_tile_level_quantification" },
        // mode: params.publish_dir_mode,
        // saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // Type of spatial features
    withLabel: 'spatial_clustering_features' {
        publishDir = [
        path: { "${params.outdir}/3_spatial_features/clustering_features" },
        // mode: params.publish_dir_mode,
        // saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withLabel: 'spatial_features' {
        publishDir = [
        path: { "${params.outdir}/3_spatial_features" },
        // mode: params.publish_dir_mode,
        // saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withLabel: 'spatial_network_features' {
        publishDir = [
        path: { "${params.outdir}/3_spatial_features/network_features" },
        // mode: params.publish_dir_mode,
        // saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]


    }

    // Individual modules (processes)
    withName: 'CREATE_CLINICAL_FILE' {
        ext.prefix = {"generated_clinical_file"}
    }

    withName: 'TILING_SINGLE_SLIDE' {
        publishDir = [
        path: { "${params.outdir}/1_extract_histopatho_features/tiles" },
        mode: "symlink",
        // saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'PREPROCESSING_SLIDES' {
        publishDir = [
        path: { "${params.outdir}/1_extract_histopatho_features/process_train" },
        mode: "symlink",
        // saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withLabel: 'compute_spatial_features' {
        cpus = check_max( 16, "cpu")
        time = { check_max ( 8.h * task.attempt, 'time')}
        memory = {check_max ( 32.GB * task.attempt, 'memory')}

    }

    withName: 'COMPUTE_NETWORK_FEATURES' {
        publishDir = [
        path: { "${params.outdir}/3_spatial_features/network_features" },
        mode: "copy",
        // saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            // mode: params.publish_dir_mode,
            // saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
